@startuml Диаграмма классов

class Player {
    -position: Coordinates
    +move(direction: Direction, coordinates: Coordinates)
}

class Inventory {
    +display()
    -contents: List<Item>
    +add(object: Object)
    +del(object: Object)
}

class Object {
    -amount: int
    + display(surface: Coordinates: Coordinates, size, amount)
}

class Money {}

class Fish {
    -position: Coordinates
    -speed: float
    -type: str
    +draw(surface: Coordinates, size)
}

class Lure {
    +useTime
    -buff: float
}

class Bait {
    -buff: float
}

class Coordinates {
    -x: float
    -y: float
}

class Direction {
    -UP: float
    -DOWN: float
    -LEFT: float
    -RIGHT: float
}

class Boat {
    -speed: float
    +draw(surface: Coordinates, size)
}

class Rod {
    -level: float
    +displayLvl(surface: Coordinates, size, level)
}

class MiniGame {
    -position: Coordinates
    +display()
    +moveFish(fish: Fish, direction: Direction, coordinates: Coordinates)
    +moveCursor(direction: Direction)
    +holdCursor(time: Time)
    +catchFish(fish: Fish)
    +useBait(bait: Bait)
}

class Shop {
    -position: Coordinates
    +display()
    +draw(surface: Coordinates, size)
}

class Island {
    -position: Coordinates
    +display()
    +draw(surface: Coordinates, size)
}

class SellFish {
    +sell(fish: Fish)
}

class UpgradeBoat {
    +upgrade(boat: Boat)
}

class UpgrateRod {
    +upgrate(rod: Rod)
}

class BuyBait {
    +buy(bait: Bait)
}

class BuyLure {
    +buy(lure: Lure)
}



Player --> Inventory : Open
Inventory --> Object
Fish --|> Object
Lure --|> Object
Rod --|> Object
Bait --|> Object
Money --|> Object
Fish --> MiniGame
Player --> Boat
Player ---> MiniGame : Play
MiniGame --> Inventory 
Player --> Shop : Open
Player --> Island : Open
Shop o-- SellFish
BuyBait --> Inventory
BuyLure --> Inventory
SellFish --> Inventory
UpgradeBoat --> Boat
UpgrateRod --> Rod
Shop o-- UpgradeBoat
Shop o-- BuyBait
Shop o-- BuyLure
Island o-- SellFish

@enduml